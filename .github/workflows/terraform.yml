name: Terraform CI/CD

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main]

permissions:
  pull-requests: write

jobs:
  plan:
    name: Terraform Plan
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./envs/dev

    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      - name: Generate tfvars from secrets
        run: |
          echo 'db_password = "${{ secrets.DB_PASSWORD }}"' > terraform.auto.tfvars

      - name: Terraform Init
        run: terraform init -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        run: terraform plan -no-color -input=false > tfplan.txt
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Comment PR with Plan
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: envs/dev/tfplan.txt

  apply:
    name: Terraform Apply
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./envs/dev

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      - name: Generate tfvars from secrets
        run: |
          echo 'db_password = "${{ secrets.DB_PASSWORD }}"' > terraform.auto.tfvars

      - name: Terraform Init
        run: terraform init -reconfigure -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ap-northeast-2

      - name: Invoke Lambda to initialize DB
        run: |
          set -e
          echo "Invoking Lambda rds-sql-initializer..."
          aws lambda invoke \
            --function-name rds-sql-initializer \
            --payload '{}' \
            --region ap-northeast-2 \
            init-db-response.json
          echo "Lambda response:"
          cat init-db-response.json